
Config 'configs/BoxInst/MS_R_50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Command Line Args: Namespace(config_file='configs/BoxInst/MS_R_50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=0, num_machines=1, opts=['OUTPUT_DIR', './viz', 'MODEL.WEIGHTS', '/workspace/AdelaiDet/training_dir/BoxInst_MS_R_50_1x/model_final.pth'], resume=False)
[32m[02/20 05:56:57 detectron2]: [39mRank of current process: 0. World size: 1
[32m[02/20 05:56:58 detectron2]: [39mEnvironment info:
----------------------  -------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 | packaged by conda-forge | (default, Sep 13 2021, 21:46:58) [GCC 9.4.0]
numpy                   1.19.5
detectron2              0.6 @/opt/conda/lib/python3.8/site-packages/detectron2
Compiler                GCC 9.3
CUDA compiler           CUDA 11.2
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/opt/conda/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.91.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.10.0+cu111 @/opt/conda/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220212
iopath                  0.1.9
cv2                     4.5.5
----------------------  -------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON,
[32m[02/20 05:56:58 detectron2]: [39mCommand line arguments: Namespace(config_file='configs/BoxInst/MS_R_50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=0, num_machines=1, opts=['OUTPUT_DIR', './viz', 'MODEL.WEIGHTS', '/workspace/AdelaiDet/training_dir/BoxInst_MS_R_50_1x/model_final.pth'], resume=False)
[32m[02/20 05:56:58 detectron2]: [39mContents of args.config_file=configs/BoxInst/MS_R_50_1x.yaml:
[38m_BASE_: "Base-BoxInst.yaml"
[38mMODEL:
[38m  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
[38m  RESNETS:
[38m    DEPTH: [39m50
[38mOUTPUT_DIR: "output/boxinst_MS_R_50_1x"
[32m[02/20 05:56:58 detectron2]: [39mRunning with full config:
[38mCUDNN_BENCHMARK: [39mfalse
[38mDATALOADER:
[38m  ASPECT_RATIO_GROUPING: [39mtrue
[38m  FILTER_EMPTY_ANNOTATIONS: [39mtrue
[38m  NUM_WORKERS: [39m4
[38m  REPEAT_THRESHOLD: [39m0.0
[38m  SAMPLER_TRAIN: [39mTrainingSampler
[38mDATASETS:
[38m  PRECOMPUTED_PROPOSAL_TOPK_TEST: [39m1000
[38m  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: [39m2000
[38m  PROPOSAL_FILES_TEST: [39m[]
[38m  PROPOSAL_FILES_TRAIN: [39m[]
[38m  TEST:
[38m  [39m-[38m [39mplant_test
[38m  TRAIN:
[38m  [39m-[38m [39mplant_train
[38mGLOBAL:
[38m  HACK: [39m1.0
[38mINPUT:
[38m  CROP:
[38m    CROP_INSTANCE: [39mtrue
[38m    ENABLED: [39mfalse
[38m    SIZE:
[38m    [39m-[38m [39m0.9
[38m    [39m-[38m [39m0.9
[38m    TYPE: [39mrelative_range
[38m  FORMAT: [39mBGR
[38m  HFLIP_TRAIN: [39mtrue
[38m  MASK_FORMAT: [39mpolygon
[38m  MAX_SIZE_TEST: [39m1333
[38m  MAX_SIZE_TRAIN: [39m1333
[38m  MIN_SIZE_TEST: [39m800
[38m  MIN_SIZE_TRAIN:
[38m  [39m-[38m [39m400
[38m  [39m-[38m [39m640
[38m  [39m-[38m [39m672
[38m  [39m-[38m [39m704
[38m  [39m-[38m [39m736
[38m  [39m-[38m [39m768
[38m  [39m-[38m [39m800
[38m  MIN_SIZE_TRAIN_SAMPLING: [39mchoice
[38m  RANDOM_FLIP: [39mhorizontal
[38mMODEL:
[38m  ANCHOR_GENERATOR:
[38m    ANGLES:
[38m    [39m-[38m [39m-[38m [39m-90
[38m      [39m-[38m [39m0
[38m      [39m-[38m [39m90
[38m    ASPECT_RATIOS:
[38m    [39m-[38m [39m-[38m [39m0.5
[38m      [39m-[38m [39m1.0
[38m      [39m-[38m [39m2.0
[38m    NAME: [39mDefaultAnchorGenerator
[38m    OFFSET: [39m0.0
[38m    SIZES:
[38m    [39m-[38m [39m-[38m [39m32
[38m      [39m-[38m [39m64
[38m      [39m-[38m [39m128
[38m      [39m-[38m [39m256
[38m      [39m-[38m [39m512
[38m  BACKBONE:
[38m    ANTI_ALIAS: [39mfalse
[38m    FREEZE_AT: [39m2
[38m    NAME: [39mbuild_fcos_resnet_fpn_backbone
[38m  BASIS_MODULE:
[38m    ANN_SET: [39mcoco
[38m    COMMON_STRIDE: [39m8
[38m    CONVS_DIM: [39m128
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    LOSS_ON: [39mfalse
[38m    LOSS_WEIGHT: [39m0.3
[38m    NAME: [39mProtoNet
[38m    NORM: [39mSyncBN
[38m    NUM_BASES: [39m4
[38m    NUM_CLASSES: [39m80
[38m    NUM_CONVS: [39m3
[38m  BATEXT:
[38m    CANONICAL_SIZE: [39m96
[38m    CONV_DIM: [39m256
[38m    CUSTOM_DICT: ''
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp2
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    NUM_CHARS: [39m25
[38m    NUM_CONV: [39m2
[38m    POOLER_RESOLUTION:
[38m    [39m-[38m [39m8
[38m    [39m-[38m [39m32
[38m    POOLER_SCALES:
[38m    [39m-[38m [39m0.25
[38m    [39m-[38m [39m0.125
[38m    [39m-[38m [39m0.0625
[38m    RECOGNITION_LOSS: [39mctc
[38m    RECOGNIZER: [39mattn
[38m    SAMPLING_RATIO: [39m1
[38m    USE_AET: [39mfalse
[38m    USE_COORDCONV: [39mfalse
[38m    VOC_SIZE: [39m96
[38m  BLENDMASK:
[38m    ATTN_SIZE: [39m14
[38m    BOTTOM_RESOLUTION: [39m56
[38m    INSTANCE_LOSS_WEIGHT: [39m1.0
[38m    POOLER_SAMPLING_RATIO: [39m1
[38m    POOLER_SCALES:
[38m    [39m-[38m [39m0.25
[38m    POOLER_TYPE: [39mROIAlignV2
[38m    TOP_INTERP: [39mbilinear
[38m    VISUALIZE: [39mfalse
[38m  BOXINST:
[38m    BOTTOM_PIXELS_REMOVED: [39m10
[38m    ENABLED: [39mtrue
[38m    PAIRWISE:
[38m      COLOR_THRESH: [39m0.3
[38m      DILATION: [39m2
[38m      SIZE: [39m3
[38m      WARMUP_ITERS: [39m10000
[38m  BiFPN:
[38m    IN_FEATURES:
[38m    [39m-[38m [39mres2
[38m    [39m-[38m [39mres3
[38m    [39m-[38m [39mres4
[38m    [39m-[38m [39mres5
[38m    NORM: ''
[38m    NUM_REPEATS: [39m6
[38m    OUT_CHANNELS: [39m160
[38m  CONDINST:
[38m    BOTTOM_PIXELS_REMOVED: [39m-1
[38m    MASK_BRANCH:
[38m      CHANNELS: [39m128
[38m      IN_FEATURES:
[38m      [39m-[38m [39mp3
[38m      [39m-[38m [39mp4
[38m      [39m-[38m [39mp5
[38m      NORM: [39mBN
[38m      NUM_CONVS: [39m4
[38m      OUT_CHANNELS: [39m16
[38m      SEMANTIC_LOSS_ON: [39mfalse
[38m    MASK_HEAD:
[38m      CHANNELS: [39m8
[38m      DISABLE_REL_COORDS: [39mfalse
[38m      NUM_LAYERS: [39m3
[38m      USE_FP16: [39mfalse
[38m    MASK_OUT_STRIDE: [39m4
[38m    MAX_PROPOSALS: [39m-1
[38m    TOPK_PROPOSALS_PER_IM: [39m64
[38m  DEVICE: [39mcuda
[38m  DLA:
[38m    CONV_BODY: [39mDLA34
[38m    NORM: [39mFrozenBN
[38m    OUT_FEATURES:
[38m    [39m-[38m [39mstage2
[38m    [39m-[38m [39mstage3
[38m    [39m-[38m [39mstage4
[38m    [39m-[38m [39mstage5
[38m  FCOS:
[38m    BOX_QUALITY: [39mctrness
[38m    CENTER_SAMPLE: [39mtrue
[38m    FPN_STRIDES:
[38m    [39m-[38m [39m8
[38m    [39m-[38m [39m16
[38m    [39m-[38m [39m32
[38m    [39m-[38m [39m64
[38m    [39m-[38m [39m128
[38m    INFERENCE_TH_TEST: [39m0.05
[38m    INFERENCE_TH_TRAIN: [39m0.05
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    [39m-[38m [39mp6
[38m    [39m-[38m [39mp7
[38m    LOC_LOSS_TYPE: [39mgiou
[38m    LOSS_ALPHA: [39m0.25
[38m    LOSS_GAMMA: [39m2.0
[38m    LOSS_NORMALIZER_CLS: [39mfg
[38m    LOSS_WEIGHT_CLS: [39m1.0
[38m    NMS_TH: [39m0.6
[38m    NORM: [39mGN
[38m    NUM_BOX_CONVS: [39m4
[38m    NUM_CLASSES: [39m1
[38m    NUM_CLS_CONVS: [39m4
[38m    NUM_SHARE_CONVS: [39m0
[38m    POST_NMS_TOPK_TEST: [39m100
[38m    POST_NMS_TOPK_TRAIN: [39m100
[38m    POS_RADIUS: [39m1.5
[38m    PRE_NMS_TOPK_TEST: [39m1000
[38m    PRE_NMS_TOPK_TRAIN: [39m1000
[38m    PRIOR_PROB: [39m0.01
[38m    SIZES_OF_INTEREST:
[38m    [39m-[38m [39m64
[38m    [39m-[38m [39m128
[38m    [39m-[38m [39m256
[38m    [39m-[38m [39m512
[38m    THRESH_WITH_CTR: [39mtrue
[38m    TOP_LEVELS: [39m2
[38m    USE_DEFORMABLE: [39mfalse
[38m    USE_RELU: [39mtrue
[38m    USE_SCALE: [39mtrue
[38m    YIELD_BOX_FEATURES: [39mfalse
[38m    YIELD_PROPOSAL: [39mfalse
[38m  FCPOSE:
[38m    ATTN_LEN: [39m2737
[38m    BASIS_MODULE:
[38m      BN_TYPE: [39mSyncBN
[38m      COMMON_STRIDE: [39m8
[38m      CONVS_DIM: [39m128
[38m      LOSS_WEIGHT: [39m0.2
[38m      NUM_BASES: [39m32
[38m      NUM_CLASSES: [39m17
[38m    DISTANCE_NORM: [39m12.0
[38m    DYNAMIC_CHANNELS: [39m32
[38m    FOCAL_LOSS_ALPHA: [39m0.25
[38m    FOCAL_LOSS_GAMMA: [39m2.0
[38m    GT_HEATMAP_STRIDE: [39m2
[38m    HEAD_HEATMAP_SIGMA: [39m0.01
[38m    HEATMAP_SIGMA: [39m1.8
[38m    LOSS_WEIGHT_DIRECTION: [39m9.0
[38m    LOSS_WEIGHT_KEYPOINT: [39m2.5
[38m    MAX_PROPOSALS: [39m70
[38m    PROPOSALS_PER_INST: [39m70
[38m    SIGMA: [39m1
[38m  FCPOSE_ON: [39mfalse
[38m  FPN:
[38m    FUSE_TYPE: [39msum
[38m    IN_FEATURES:
[38m    [39m-[38m [39mres3
[38m    [39m-[38m [39mres4
[38m    [39m-[38m [39mres5
[38m    NORM: ''
[38m    OUT_CHANNELS: [39m256
[38m  KEYPOINT_ON: [39mfalse
[38m  LOAD_PROPOSALS: [39mfalse
[38m  MASK_ON: [39mtrue
[38m  MEInst:
[38m    AGNOSTIC: [39mtrue
[38m    CENTER_SAMPLE: [39mtrue
[38m    DIM_MASK: [39m60
[38m    FLAG_PARAMETERS: [39mfalse
[38m    FPN_STRIDES:
[38m    [39m-[38m [39m8
[38m    [39m-[38m [39m16
[38m    [39m-[38m [39m32
[38m    [39m-[38m [39m64
[38m    [39m-[38m [39m128
[38m    GCN_KERNEL_SIZE: [39m9
[38m    INFERENCE_TH_TEST: [39m0.05
[38m    INFERENCE_TH_TRAIN: [39m0.05
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    [39m-[38m [39mp6
[38m    [39m-[38m [39mp7
[38m    IOU_LABELS:
[38m    [39m-[38m [39m0
[38m    [39m-[38m [39m1
[38m    IOU_THRESHOLDS:
[38m    [39m-[38m [39m0.5
[38m    LAST_DEFORMABLE: [39mfalse
[38m    LOC_LOSS_TYPE: [39mgiou
[38m    LOSS_ALPHA: [39m0.25
[38m    LOSS_GAMMA: [39m2.0
[38m    LOSS_ON_MASK: [39mfalse
[38m    MASK_LOSS_TYPE: [39mmse
[38m    MASK_ON: [39mtrue
[38m    MASK_SIZE: [39m28
[38m    NMS_TH: [39m0.6
[38m    NORM: [39mGN
[38m    NUM_BOX_CONVS: [39m4
[38m    NUM_CLASSES: [39m80
[38m    NUM_CLS_CONVS: [39m4
[38m    NUM_MASK_CONVS: [39m4
[38m    NUM_SHARE_CONVS: [39m0
[38m    PATH_COMPONENTS: [39mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz
[38m    POST_NMS_TOPK_TEST: [39m100
[38m    POST_NMS_TOPK_TRAIN: [39m100
[38m    POS_RADIUS: [39m1.5
[38m    PRE_NMS_TOPK_TEST: [39m1000
[38m    PRE_NMS_TOPK_TRAIN: [39m1000
[38m    PRIOR_PROB: [39m0.01
[38m    SIGMOID: [39mtrue
[38m    SIZES_OF_INTEREST:
[38m    [39m-[38m [39m64
[38m    [39m-[38m [39m128
[38m    [39m-[38m [39m256
[38m    [39m-[38m [39m512
[38m    THRESH_WITH_CTR: [39mfalse
[38m    TOP_LEVELS: [39m2
[38m    TYPE_DEFORMABLE: [39mDCNv1
[38m    USE_DEFORMABLE: [39mfalse
[38m    USE_GCN_IN_MASK: [39mfalse
[38m    USE_RELU: [39mtrue
[38m    USE_SCALE: [39mtrue
[38m    WHITEN: [39mtrue
[38m  META_ARCHITECTURE: [39mCondInst
[38m  MOBILENET: [39mfalse
[38m  PANOPTIC_FPN:
[38m    COMBINE:
[38m      ENABLED: [39mtrue
[38m      INSTANCES_CONFIDENCE_THRESH: [39m0.5
[38m      OVERLAP_THRESH: [39m0.5
[38m      STUFF_AREA_LIMIT: [39m4096
[38m    INSTANCE_LOSS_WEIGHT: [39m1.0
[38m  PIXEL_MEAN:
[38m  [39m-[38m [39m103.53
[38m  [39m-[38m [39m116.28
[38m  [39m-[38m [39m123.675
[38m  PIXEL_STD:
[38m  [39m-[38m [39m1.0
[38m  [39m-[38m [39m1.0
[38m  [39m-[38m [39m1.0
[38m  PROPOSAL_GENERATOR:
[38m    MIN_SIZE: [39m0
[38m    NAME: [39mFCOS
[38m  RESNETS:
[38m    DEFORM_INTERVAL: [39m1
[38m    DEFORM_MODULATED: [39mfalse
[38m    DEFORM_NUM_GROUPS: [39m1
[38m    DEFORM_ON_PER_STAGE:
[38m    [39m-[38m [39mfalse
[38m    [39m-[38m [39mfalse
[38m    [39m-[38m [39mfalse
[38m    [39m-[38m [39mfalse
[38m    DEPTH: [39m50
[38m    NORM: [39mFrozenBN
[38m    NUM_GROUPS: [39m1
[38m    OUT_FEATURES:
[38m    [39m-[38m [39mres3
[38m    [39m-[38m [39mres4
[38m    [39m-[38m [39mres5
[38m    RES2_OUT_CHANNELS: [39m256
[38m    RES5_DILATION: [39m1
[38m    STEM_OUT_CHANNELS: [39m64
[38m    STRIDE_IN_1X1: [39mtrue
[38m    WIDTH_PER_GROUP: [39m64
[38m  RETINANET:
[38m    BBOX_REG_LOSS_TYPE: [39msmooth_l1
[38m    BBOX_REG_WEIGHTS: &id002
[38m    [39m-[38m [39m1.0
[38m    [39m-[38m [39m1.0
[38m    [39m-[38m [39m1.0
[38m    [39m-[38m [39m1.0
[38m    FOCAL_LOSS_ALPHA: [39m0.25
[38m    FOCAL_LOSS_GAMMA: [39m2.0
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    [39m-[38m [39mp6
[38m    [39m-[38m [39mp7
[38m    IOU_LABELS:
[38m    [39m-[38m [39m0
[38m    [39m-[38m [39m-1
[38m    [39m-[38m [39m1
[38m    IOU_THRESHOLDS:
[38m    [39m-[38m [39m0.4
[38m    [39m-[38m [39m0.5
[38m    NMS_THRESH_TEST: [39m0.5
[38m    NORM: ''
[38m    NUM_CLASSES: [39m80
[38m    NUM_CONVS: [39m4
[38m    PRIOR_PROB: [39m0.01
[38m    SCORE_THRESH_TEST: [39m0.05
[38m    SMOOTH_L1_LOSS_BETA: [39m0.1
[38m    TOPK_CANDIDATES_TEST: [39m1000
[38m  ROI_BOX_CASCADE_HEAD:
[38m    BBOX_REG_WEIGHTS:
[38m    [39m-[38m &id001
[38m      [39m-[38m [39m10.0
[38m      [39m-[38m [39m10.0
[38m      [39m-[38m [39m5.0
[38m      [39m-[38m [39m5.0
[38m    [39m-[38m [39m-[38m [39m20.0
[38m      [39m-[38m [39m20.0
[38m      [39m-[38m [39m10.0
[38m      [39m-[38m [39m10.0
[38m    [39m-[38m [39m-[38m [39m30.0
[38m      [39m-[38m [39m30.0
[38m      [39m-[38m [39m15.0
[38m      [39m-[38m [39m15.0
[38m    IOUS:
[38m    [39m-[38m [39m0.5
[38m    [39m-[38m [39m0.6
[38m    [39m-[38m [39m0.7
[38m  ROI_BOX_HEAD:
[38m    BBOX_REG_LOSS_TYPE: [39msmooth_l1
[38m    BBOX_REG_LOSS_WEIGHT: [39m1.0
[38m    BBOX_REG_WEIGHTS: *id001
[38m    CLS_AGNOSTIC_BBOX_REG: [39mfalse
[38m    CONV_DIM: [39m256
[38m    FC_DIM: [39m1024
[38m    NAME: ''
[38m    NORM: ''
[38m    NUM_CONV: [39m0
[38m    NUM_FC: [39m0
[38m    POOLER_RESOLUTION: [39m14
[38m    POOLER_SAMPLING_RATIO: [39m0
[38m    POOLER_TYPE: [39mROIAlignV2
[38m    SMOOTH_L1_BETA: [39m0.0
[38m    TRAIN_ON_PRED_BOXES: [39mfalse
[38m  ROI_HEADS:
[38m    BATCH_SIZE_PER_IMAGE: [39m512
[38m    IN_FEATURES:
[38m    [39m-[38m [39mres4
[38m    IOU_LABELS:
[38m    [39m-[38m [39m0
[38m    [39m-[38m [39m1
[38m    IOU_THRESHOLDS:
[38m    [39m-[38m [39m0.5
[38m    NAME: [39mRes5ROIHeads
[38m    NMS_THRESH_TEST: [39m0.5
[38m    NUM_CLASSES: [39m80
[38m    POSITIVE_FRACTION: [39m0.25
[38m    PROPOSAL_APPEND_GT: [39mtrue
[38m    SCORE_THRESH_TEST: [39m0.05
[38m  ROI_KEYPOINT_HEAD:
[38m    CONV_DIMS:
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    [39m-[38m [39m512
[38m    LOSS_WEIGHT: [39m1.0
[38m    MIN_KEYPOINTS_PER_IMAGE: [39m1
[38m    NAME: [39mKRCNNConvDeconvUpsampleHead
[38m    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: [39mtrue
[38m    NUM_KEYPOINTS: [39m17
[38m    POOLER_RESOLUTION: [39m14
[38m    POOLER_SAMPLING_RATIO: [39m0
[38m    POOLER_TYPE: [39mROIAlignV2
[38m  ROI_MASK_HEAD:
[38m    CLS_AGNOSTIC_MASK: [39mfalse
[38m    CONV_DIM: [39m256
[38m    NAME: [39mMaskRCNNConvUpsampleHead
[38m    NORM: ''
[38m    NUM_CONV: [39m0
[38m    POOLER_RESOLUTION: [39m14
[38m    POOLER_SAMPLING_RATIO: [39m0
[38m    POOLER_TYPE: [39mROIAlignV2
[38m  RPN:
[38m    BATCH_SIZE_PER_IMAGE: [39m256
[38m    BBOX_REG_LOSS_TYPE: [39msmooth_l1
[38m    BBOX_REG_LOSS_WEIGHT: [39m1.0
[38m    BBOX_REG_WEIGHTS: *id002
[38m    BOUNDARY_THRESH: [39m-1
[38m    CONV_DIMS:
[38m    [39m-[38m [39m-1
[38m    HEAD_NAME: [39mStandardRPNHead
[38m    IN_FEATURES:
[38m    [39m-[38m [39mres4
[38m    IOU_LABELS:
[38m    [39m-[38m [39m0
[38m    [39m-[38m [39m-1
[38m    [39m-[38m [39m1
[38m    IOU_THRESHOLDS:
[38m    [39m-[38m [39m0.3
[38m    [39m-[38m [39m0.7
[38m    LOSS_WEIGHT: [39m1.0
[38m    NMS_THRESH: [39m0.7
[38m    POSITIVE_FRACTION: [39m0.5
[38m    POST_NMS_TOPK_TEST: [39m1000
[38m    POST_NMS_TOPK_TRAIN: [39m2000
[38m    PRE_NMS_TOPK_TEST: [39m6000
[38m    PRE_NMS_TOPK_TRAIN: [39m12000
[38m    SMOOTH_L1_BETA: [39m0.0
[38m  SEM_SEG_HEAD:
[38m    COMMON_STRIDE: [39m4
[38m    CONVS_DIM: [39m128
[38m    IGNORE_VALUE: [39m255
[38m    IN_FEATURES:
[38m    [39m-[38m [39mp2
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    LOSS_WEIGHT: [39m1.0
[38m    NAME: [39mSemSegFPNHead
[38m    NORM: [39mGN
[38m    NUM_CLASSES: [39m54
[38m  SOLOV2:
[38m    FPN_INSTANCE_STRIDES:
[38m    [39m-[38m [39m8
[38m    [39m-[38m [39m8
[38m    [39m-[38m [39m16
[38m    [39m-[38m [39m32
[38m    [39m-[38m [39m32
[38m    FPN_SCALE_RANGES:
[38m    [39m-[38m [39m-[38m [39m1
[38m      [39m-[38m [39m96
[38m    [39m-[38m [39m-[38m [39m48
[38m      [39m-[38m [39m192
[38m    [39m-[38m [39m-[38m [39m96
[38m      [39m-[38m [39m384
[38m    [39m-[38m [39m-[38m [39m192
[38m      [39m-[38m [39m768
[38m    [39m-[38m [39m-[38m [39m384
[38m      [39m-[38m [39m2048
[38m    INSTANCE_CHANNELS: [39m512
[38m    INSTANCE_IN_CHANNELS: [39m256
[38m    INSTANCE_IN_FEATURES:
[38m    [39m-[38m [39mp2
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    [39m-[38m [39mp6
[38m    LOSS:
[38m      DICE_WEIGHT: [39m3.0
[38m      FOCAL_ALPHA: [39m0.25
[38m      FOCAL_GAMMA: [39m2.0
[38m      FOCAL_USE_SIGMOID: [39mtrue
[38m      FOCAL_WEIGHT: [39m1.0
[38m    MASK_CHANNELS: [39m128
[38m    MASK_IN_CHANNELS: [39m256
[38m    MASK_IN_FEATURES:
[38m    [39m-[38m [39mp2
[38m    [39m-[38m [39mp3
[38m    [39m-[38m [39mp4
[38m    [39m-[38m [39mp5
[38m    MASK_THR: [39m0.5
[38m    MAX_PER_IMG: [39m100
[38m    NMS_KERNEL: [39mgaussian
[38m    NMS_PRE: [39m500
[38m    NMS_SIGMA: [39m2
[38m    NMS_TYPE: [39mmatrix
[38m    NORM: [39mGN
[38m    NUM_CLASSES: [39m80
[38m    NUM_GRIDS:
[38m    [39m-[38m [39m40
[38m    [39m-[38m [39m36
[38m    [39m-[38m [39m24
[38m    [39m-[38m [39m16
[38m    [39m-[38m [39m12
[38m    NUM_INSTANCE_CONVS: [39m4
[38m    NUM_KERNELS: [39m256
[38m    NUM_MASKS: [39m256
[38m    PRIOR_PROB: [39m0.01
[38m    SCORE_THR: [39m0.1
[38m    SIGMA: [39m0.2
[38m    TYPE_DCN: [39mDCN
[38m    UPDATE_THR: [39m0.05
[38m    USE_COORD_CONV: [39mtrue
[38m    USE_DCN_IN_INSTANCE: [39mfalse
[38m  TOP_MODULE:
[38m    DIM: [39m16
[38m    NAME: [39mconv
[38m  VOVNET:
[38m    BACKBONE_OUT_CHANNELS: [39m256
[38m    CONV_BODY: [39mV-39-eSE
[38m    NORM: [39mFrozenBN
[38m    OUT_CHANNELS: [39m256
[38m    OUT_FEATURES:
[38m    [39m-[38m [39mstage2
[38m    [39m-[38m [39mstage3
[38m    [39m-[38m [39mstage4
[38m    [39m-[38m [39mstage5
[38m  WEIGHTS: [39m/workspace/AdelaiDet/training_dir/BoxInst_MS_R_50_1x/model_final.pth
[38mOUTPUT_DIR: [39m./viz
[38mSEED: [39m-1
[38mSOLVER:
[38m  AMP:
[38m    ENABLED: [39mfalse
[38m  BASE_LR: [39m0.015
[38m  BASE_LR_END: [39m0.0
[38m  BIAS_LR_FACTOR: [39m1.0
[38m  CHECKPOINT_PERIOD: [39m5000
[38m  CLIP_GRADIENTS:
[38m    CLIP_TYPE: [39mvalue
[38m    CLIP_VALUE: [39m1.0
[38m    ENABLED: [39mfalse
[38m    NORM_TYPE: [39m2.0
[38m  GAMMA: [39m0.1
[38m  IMS_PER_BATCH: [39m2
[38m  LR_SCHEDULER_NAME: [39mWarmupMultiStepLR
[38m  MAX_ITER: [39m80000
[38m  MOMENTUM: [39m0.9
[38m  NESTEROV: [39mfalse
[38m  REFERENCE_WORLD_SIZE: [39m0
[38m  STEPS:
[38m  [39m-[38m [39m60000
[38m  [39m-[38m [39m80000
[38m  WARMUP_FACTOR: [39m0.001
[38m  WARMUP_ITERS: [39m1000
[38m  WARMUP_METHOD: [39mlinear
[38m  WEIGHT_DECAY: [39m0.0001
[38m  WEIGHT_DECAY_BIAS: [39mnull
[38m  WEIGHT_DECAY_NORM: [39m0.0
[38mTEST:
[38m  AUG:
[38m    ENABLED: [39mfalse
[38m    FLIP: [39mtrue
[38m    MAX_SIZE: [39m4000
[38m    MIN_SIZES:
[38m    [39m-[38m [39m400
[38m    [39m-[38m [39m500
[38m    [39m-[38m [39m600
[38m    [39m-[38m [39m700
[38m    [39m-[38m [39m800
[38m    [39m-[38m [39m900
[38m    [39m-[38m [39m1000
[38m    [39m-[38m [39m1100
[38m    [39m-[38m [39m1200
[38m  DETECTIONS_PER_IMAGE: [39m100
[38m  EVAL_PERIOD: [39m5000
[38m  EXPECTED_RESULTS: [39m[]
[38m  KEYPOINT_OKS_SIGMAS: [39m[]
[38m  PRECISE_BN:
[38m    ENABLED: [39mfalse
[38m    NUM_ITER: [39m200
[38mVERSION: [39m2
[38mVIS_PERIOD: [39m0
[32m[02/20 05:56:58 detectron2]: [39mFull config saved to ./viz/config.yaml
[32m[02/20 05:56:58 d2.utils.env]: [39mUsing a generated random seed 58619086
[32m[02/20 05:57:02 d2.engine.defaults]: [39mModel:
CondInst(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): FCOS(
    (fcos_head): FCOSHead(
      (cls_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (bbox_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (share_tower): Sequential()
      (cls_logits): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (scales): ModuleList(
        (0): Scale()
        (1): Scale()
        (2): Scale()
        (3): Scale()
        (4): Scale()
      )
    )
    (fcos_outputs): FCOSOutputs(
      (loc_loss_func): IOULoss()
    )
  )
  (mask_head): DynamicMaskHead()
  (mask_branch): MaskBranch(
    (refine): ModuleList(
      (0): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (tower): Sequential(
      (0): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (3): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
[32m[02/20 05:57:02 fvcore.common.checkpoint]: [39m[Checkpointer] Loading from /workspace/AdelaiDet/training_dir/BoxInst_MS_R_50_1x/model_final.pth ...
Traceback (most recent call last):
  File "/opt/conda/lib/python3.8/site-packages/detectron2/data/catalog.py", line 51, in get
    f = self[name]
  File "/opt/conda/lib/python3.8/collections/__init__.py", line 1010, in __getitem__
    raise KeyError(key)
KeyError: 'plant_test'
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
  File "tools/train_net.py", line 242, in <module>
    launch(
  File "/opt/conda/lib/python3.8/site-packages/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "tools/train_net.py", line 219, in main
    res = Trainer.test(cfg, model) # d2 defaults.py
  File "/opt/conda/lib/python3.8/site-packages/detectron2/engine/defaults.py", line 602, in test
    data_loader = cls.build_test_loader(cfg, dataset_name)
  File "/opt/conda/lib/python3.8/site-packages/detectron2/engine/defaults.py", line 558, in build_test_loader
    return build_detection_test_loader(cfg, dataset_name)
  File "/opt/conda/lib/python3.8/site-packages/detectron2/config/config.py", line 207, in wrapped
    explicit_args = _get_args_from_config(from_config, *args, **kwargs)
  File "/opt/conda/lib/python3.8/site-packages/detectron2/config/config.py", line 245, in _get_args_from_config
    ret = from_config_func(*args, **kwargs)
  File "/opt/conda/lib/python3.8/site-packages/detectron2/data/build.py", line 449, in _test_loader_from_config
    dataset = get_detection_dataset_dicts(
  File "/opt/conda/lib/python3.8/site-packages/detectron2/data/build.py", line 241, in get_detection_dataset_dicts
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/opt/conda/lib/python3.8/site-packages/detectron2/data/build.py", line 241, in <listcomp>
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/opt/conda/lib/python3.8/site-packages/detectron2/data/catalog.py", line 53, in get
    raise KeyError(
KeyError: "Dataset 'plant_test' is not registered! Available datasets are: coco_2014_train, coco_2014_val, coco_2014_minival, coco_2014_valminusminival, coco_2017_train, coco_2017_val, coco_2017_test, coco_2017_test-dev, coco_2017_val_100, keypoints_coco_2014_train, keypoints_coco_2014_val, keypoints_coco_2014_minival, keypoints_coco_2014_valminusminival, keypoints_coco_2017_train, keypoints_coco_2017_val, keypoints_coco_2017_val_100, coco_2017_train_panoptic_separated, coco_2017_train_panoptic_stuffonly, coco_2017_train_panoptic, coco_2017_val_panoptic_separated, coco_2017_val_panoptic_stuffonly, coco_2017_val_panoptic, coco_2017_val_100_panoptic_separated, coco_2017_val_100_panoptic_stuffonly, coco_2017_val_100_panoptic, lvis_v1_train, lvis_v1_val, lvis_v1_test_dev, lvis_v1_test_challenge, lvis_v0.5_train, lvis_v0.5_val, lvis_v0.5_val_rand_100, lvis_v0.5_test, lvis_v0.5_train_cocofied, lvis_v0.5_val_cocofied, cityscapes_fine_instance_seg_train, cityscapes_fine_sem_seg_train, cityscapes_fine_instance_seg_val, cityscapes_fine_sem_seg_val, cityscapes_fine_instance_seg_test, cityscapes_fine_sem_seg_test, cityscapes_fine_panoptic_train, cityscapes_fine_panoptic_val, voc_2007_trainval, voc_2007_train, voc_2007_val, voc_2007_test, voc_2012_trainval, voc_2012_train, voc_2012_val, ade20k_sem_seg_train, ade20k_sem_seg_val, pic_person_train, pic_person_val, totaltext_train, totaltext_val, ctw1500_word_train, ctw1500_word_test, syntext1_train, syntext2_train, mltbezier_word_train, rects_train, rects_val, rects_test, art_train, lsvt_train, chnsyn_train, grape_train, grape_val, plant_train, plant_val"